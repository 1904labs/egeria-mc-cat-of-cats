# A Nanny Demo

@nannyURL=https://localhost:9446
@adminUserId=garygeeke
@user=garygeeke
@kafkaep=localhost:9092
@max_page_size=100

@baseURL=https://localhost:9443
@ecosystemMonitor=ecosystem-monitor
@nannyAuditLogTopic=egeriaAuditlogs
@nannyDB=jdbc:postgresql://wolfsonnet.me:5432/observations_base

@nannyMonitor=nanny-monitor
@nannyStore=nanny-store
@nannyHarvester=nanny-harvester
@atlasNannyDB=jdbc:postgresql://wolfsonnet.me:5432/observations_base

@ecosystemServer=active-metadata-store
@glossaryGUID=xxx
@glossaryTermGUID=xxx


###
# group: Configure nanny-store
# @name Set local server URL root
# Update the URL root that other servers that are also members any open metadata repository cohort that the server belongs to should use to make calls to this local server. This value is sent when the server registers with the cohort.  If the server is not going to join a cohort then this value is not needed.
# This value should be set to the URL of the OMAG Server Platform where the server will run.  If the server is deployed to many servers in an HA cluster configuration, it should be set to a DNS name that will disperse requests across the server cluster.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyStore}}/server-url-root-for-caller
Content-Type: application/json

{
    "class": "URLRequestBody",
    "urlRoot": "{{omagURL}}"
}

###
# group: Configure nanny-store
# @name Set local server user Id
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyStore}}/server-user-id?
    id=nannystorenpa

###
# group: Configure nanny-store
# @name Set up event bus
# Set up the common properties needed to call your event bus.  These properties are passed in the request body.
# This request just sets up the defaults that will be incorporated into any future configuration that includes an event bus topic.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyStore}}/event-bus
Content-Type: application/json

{
    "producer": {
        "bootstrap.servers": "{{kafkaep}}"
    },
    "consumer":{
        "bootstrap.servers": "{{kafkaep}}"
    }
}

###
# group: Configure nanny-store
# @name Enable the in-memory repository
# Set up the local reposiotry to use the in-memory implementation.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyStore}}/local-repository/mode/in-memory-repository

###
# group: Configure nanny-store
# @name Enable the Asset Manager OMAS
# Turn on a specific registered Open Metadata Access Services (OMAS).
# Change the value of the {{access-service}} variable in the environment to be the URL version of the name.  Typically this is done by taking the access service name, dropping "OMAS", change to lower-case and link two words with a dash "-".  For example, Asset Owner OMAS, would have a url name of asset-owner.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyStore}}/access-services/asset-manager

###
# group: Configure nanny-store
# @name Get nanny-store's configuration document
# Retrieve the configuration document for the named server.
GET {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyStore}}/configuration

###
# group: Configure nanny-monitor
# @name Set local server user Id
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyMonitor}}/server-user-id?
    id=nannymonitornpa

###
# group: Configure nanny-monitor
# @name Configure the LoadObservationsByEgeria integration connector
# Add details of the metadata server to call and the connectors to run.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyMonitor}}/integration-services/catalog-integrator
Content-Type: application/json

{
    "class": "IntegrationServiceRequestBody",
    "omagserverPlatformRootURL": "{{omagURL}}",
    "omagserverName": "{{nannyStore}}",
    "integrationConnectorConfigs": [
        {
            "class": "IntegrationConnectorConfig",
            "connectorName": "LoadObservationsByEgeria",
            "connectorUserId": "loadobnpa",
            "connection": {
                "class": "Connection",
                "connectorType": {
                    "class": "ConnectorType",
                    "connectorProviderClassName": "org.odpi.openmetadata.adapters.connectors.nannyconnectors.loadobservations.LoadObservationsByEgeriaProvider"
                },
                "endpoint": {
                    "class": "Endpoint",
                    "address": "{{atlasNannyDB}}"
                },
                "userId" : "pdr",
                "clearPassword" : "pdr4egeria",
                "configurationProperties" : {
                    "jdbcDriverManagerClassName" : "org.postgresql.Driver",
                    "jdbcConnectionTimeout" : "10",
                    "jdbcDatabaseName" : "AtlasObservationsByEgeria"
                }
            },
            "refreshTimeInterval": "10",
            "usesBlockingCalls": "false",
            "permittedSynchronization": "TO_THIRD_PARTY"
        }
    ]
}

###
# group: Configure nanny-monitor
# @name Get nanny-monitor's configuration document
# Retrieve the configuration document for the named server.
GET {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyMonitor}}/configuration

###
# group: Configure nanny-harvester
# @name Set local server user Id
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyHarvester}}/server-user-id?
    id=nannyharvesternpa

###
# group: Configure nanny-harvester
# @name Configure the connections to third party catalogs
# Add details of the metadata server to call and the connectors to run.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyHarvester}}/integration-services/catalog-integrator
Content-Type: application/json

{
    "class": "IntegrationServiceRequestBody",
    "omagserverPlatformRootURL": "{{nannyURL}}",
    "omagserverName": "{{nannyStore}}",
    "integrationConnectorConfigs": [
        {
            "class": "IntegrationConnectorConfig",
            "connectorName": "AtlasIntegrator",
            "connectorUserId": "atlasintgnpa",
            "connection": {
                "class": "Connection",
                "connectorType": {
                    "class": "ConnectorType",
                    "connectorProviderClassName": "org.odpi.openmetadata.adapters.connectors.integration.apacheatlas.ApacheAtlasIntegrationProvider"
                },
                "endpoint": {
                    "class": "Endpoint",
                    "address": "http://wolfsonnet.me:21000"
                },
                "userId" : "admin",
                "clearPassword" : "admin"
            },
            "metadataSourceQualifiedName": "ApacheAtlasDL01",
            "refreshTimeInterval": "15",
            "usesBlockingCalls": "false",
            "permittedSynchronization": "BOTH_DIRECTIONS"
        },
        {
            "class": "IntegrationConnectorConfig",
            "connectorName": "AtlasIntegrator(local)",
            "connectorUserId": "atlaslocalnpa",
            "connection": {
                "class": "Connection",
                "connectorType": {
                    "class": "ConnectorType",
                    "connectorProviderClassName": "org.odpi.openmetadata.adapters.connectors.integration.apacheatlas.ApacheAtlasIntegrationProvider"
                },
                "endpoint": {
                    "class": "Endpoint",
                    "address": "http://localhost:21000"
                },
                "userId" : "admin",
                "clearPassword" : "admin"
            },
            "metadataSourceQualifiedName": "ApacheAtlasDL02",
            "refreshTimeInterval": "15",
            "usesBlockingCalls": "false",
            "permittedSynchronization": "BOTH_DIRECTIONS"
        }
    ]
}

###
# group: Configure nanny-harvester
# @name Get nanny-harvester's configuration document
# Retrieve the configuration document for the named server.
GET {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{nannyHarvester}}/configuration

###
# group: Configure ecosystem-monitor
# @name Set max page size
# Set up the maximum number of results that can be returned on an open metadata request.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{ecosystemMonitor}}/max-page-size?
    limit={{max_page_size}}

###
# group: Configure ecosystem-monitor
# @name Set local server user Id
# Set up the user Id that this server should use on open metadata requests when it is processing events (and consequently there is no end user id to use).
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{ecosystemMonitor}}/server-user-id?
    id=ecosystemmonitornpa

###
# group: Configure ecosystem-monitor
# @name Configure the LoadObservationsByEgeria and DistributeAuditLogEvents integration connectors
# Add details of the metadata server to call and the connectors to run.
POST {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{ecosystemMonitor}}/integration-services/catalog-integrator
Content-Type: application/json

{
    "class": "IntegrationServiceRequestBody",
    "omagserverPlatformRootURL": "{{baseURL}}",
    "omagserverName": "{{server}}",
    "integrationConnectorConfigs": [
        {
            "class": "IntegrationConnectorConfig",
            "connectorName": "LoadObservationsByEgeria",
            "connectorUserId": "loadobnpa",
            "connection": {
                "class": "Connection",
                "connectorType": {
                    "class": "ConnectorType",
                    "connectorProviderClassName": "org.odpi.openmetadata.adapters.connectors.nannyconnectors.loadobservations.LoadObservationsByEgeriaProvider"
                },
                "endpoint": {
                    "class": "Endpoint",
                    "address": "{{nannyDB}}"
                },
                "userId" : "pdr",
                "clearPassword" : "pdr4egeria",
                "configurationProperties" : {
                    "jdbcDriverManagerClass" : "org.postgresql.Driver",
                    "jdbcConnectionTimeout" : "10",
                    "jdbcDatabaseName" : "ObservationsByEgeria"
                }
            },
            "refreshTimeInterval": "10",
            "usesBlockingCalls": "false",
            "permittedSynchronization": "TO_THIRD_PARTY"
        },
        {
            "class": "IntegrationConnectorConfig",
            "connectorName": "DistributeAuditLogEvents",
            "connectorUserId": "distaauditnpa",
            "connection": {
                "class": "VirtualConnection",
                "connectorType": {
                    "class": "ConnectorType",
                    "connectorProviderClassName": "org.odpi.openmetadata.adapters.connectors.nannyconnectors.kafkaaudit.DistributeAuditEventsFromKafkaProvider"
                },
                "embeddedConnections": [
                    {
                        "class": "EmbeddedConnection",
                        "embeddedConnection": {
                            "class": "Connection",
                            "connectorType": {
                                "class": "ConnectorType",
                                "connectorProviderClassName": "org.odpi.openmetadata.adapters.eventbus.topic.kafka.KafkaOpenMetadataTopicProvider"
                            },
                            "endpoint": {
                                "class": "Endpoint",
                                "address": "egeria.omag.egeriaAuditLogs"
                            },
                            "configurationProperties": {
                                "producer": {
                                    "bootstrap.servers": "localhost:9092"
                                },
                                "local.server.id": "{{ecosystemMonitor}}",
                                "consumer": {
                                    "bootstrap.servers": "localhost:9092"
                                },
                                "eventDirection": "inOut"
                            }
                        }
                    },
                    {
                        "class": "EmbeddedConnection",
                        "embeddedConnection": {
                            "class": "Connection",
                            "connectorType": {
                                "class": "ConnectorType",
                                "connectorProviderClassName": "org.odpi.openmetadata.adapters.connectors.nannyconnectors.loadaudit.JDBCAuditLogDestinationProvider"
                            },
                            "endpoint": {
                                "class": "Endpoint",
                                "address": "{{nannyDB}}"
                            },
                            "userId" : "pdr",
                            "clearPassword" : "pdr4egeria",
                            "configurationProperties" : {
                                "jdbcDriverManagerClassName" : "org.postgresql.Driver",
                                "jdbcConnectionTimeout" : "10",
                                "jdbcDatabaseName" : "ObservationsByEgeria"
                            }
                        }
                    }
                ]
            },
            "refreshTimeInterval": "2000",
            "usesBlockingCalls": "false",
            "permittedSynchronization": "TO_THIRD_PARTY"
        }
    ]
}

###
# group: Configure ecosystem-monitor
# @name Get ecosystem-monitor's configuration document
# Retrieve the configuration document for the named server.
GET {{nannyURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{ecosystemMonitor}}/configuration

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Get ecosystem-monitor's configuration document
# Retrieve the configuration document for the named server.
GET {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/{{ecosystemMonitor}}/configuration

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Enable the Asset Manager OMAS in cocoMDS2
# Turn on a specific registered Open Metadata Access Services (OMAS).
# Change the value of the {{access-service}} variable in the environment to be the URL version of the name.  Typically this is done by taking the access service name, dropping "OMAS", change to lower-case and link two words with a dash "-".  For example, Asset Owner OMAS, would have a url name of asset-owner.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDS2/access-services/asset-manager

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoMDS1
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDS1/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoMDS2
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDS2/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoMDS3
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDS3/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoMDS4
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDS4/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoMDS5
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDS5/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoMDS6
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDS6/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoMDSx
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoMDSx/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoOLS1
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoOLS1/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to cocoView1
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/cocoView1/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Set up event bus in exchangeDL01
# Set up the common properties needed to call your event bus.  These properties are passed in the request body.
# This request just sets up the defaults that will be incorporated into any future configuration that includes an event bus topic.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/exchangeDL01/event-bus
Content-Type: application/json

{
    "producer": {
        "bootstrap.servers": "{{kafkaep}}"
    },
    "consumer":{
        "bootstrap.servers": "{{kafkaep}}"
    }
}

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to exchangeDL01
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/exchangeDL01/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Set up event bus in governDL01
# Set up the common properties needed to call your event bus.  These properties are passed in the request body.
# This request just sets up the defaults that will be incorporated into any future configuration that includes an event bus topic.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/governDL01/event-bus
Content-Type: application/json

{
    "producer": {
        "bootstrap.servers": "{{kafkaep}}"
    },
    "consumer":{
        "bootstrap.servers": "{{kafkaep}}"
    }
}

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to governDL01
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/governDL01/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Set up event bus in monitorDev01
# Set up the common properties needed to call your event bus.  These properties are passed in the request body.
# This request just sets up the defaults that will be incorporated into any future configuration that includes an event bus topic.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/monitorDev01/event-bus
Content-Type: application/json

{
    "producer": {
        "bootstrap.servers": "{{kafkaep}}"
    },
    "consumer":{
        "bootstrap.servers": "{{kafkaep}}"
    }
}

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to monitorDev01
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/monitorDev01/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Set up event bus in monitorGov01
# Set up the common properties needed to call your event bus.  These properties are passed in the request body.
# This request just sets up the defaults that will be incorporated into any future configuration that includes an event bus topic.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/monitorGov01/event-bus
Content-Type: application/json

{
    "producer": {
        "bootstrap.servers": "{{kafkaep}}"
    },
    "consumer":{
        "bootstrap.servers": "{{kafkaep}}"
    }
}

###
# group: Configure Coco Servers (ecosystem monitor only)
# @name Add topic audit log destination to monitorGov01
# Add the event topic audit log destination to the server's configuration document.  The list of severities that are sent to this destination are passed on the request body.  An empty list means all severities.
# The server may have multiple audit log destinations configured.  Typically each destination has a different subset of the severities configured.
POST {{baseURL}}/open-metadata/admin-services/users/{{adminUserId}}/servers/monitorGov01/audit-log-destinations/event-topic?
    topicName={{nannyAuditLogTopic}}
Content-Type: application/json

[]

###
# group: Start Nanny Servers
# @name Start nanny-store server
# Activate a server on the OMAG Server Platform.  Use the configuration document found in the configuration document store.
POST {{nannyURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/{{nannyStore}}/instance

###
# group: Start Nanny Servers
# @name Start nanny-monitor server
# Activate a server on the OMAG Server Platform.  Use the configuration document found in the configuration document store.
POST {{nannyURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/{{nannyMonitor}}/instance

###
# group: Start Nanny Servers
# @name Start nanny-harvester server
# Activate a server on the OMAG Server Platform.  Use the configuration document found in the configuration document store.
POST {{nannyURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/{{nannyHarvester}}/instance

###
# group: Start Nanny Servers
# @name Start ecosystem-monitor server
# Activate a server on the OMAG Server Platform.  Use the configuration document found in the configuration document store.
POST {{nannyURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/{{ecosystemMonitor}}/instance

###
# group: Check Status for Nanny Servers
# @name Get nanny-monitor status
# Retrieves the status of the connectors running in the Integration Daemon
GET {{nannyURL}}/servers/{{nannyMonitor}}/open-metadata/integration-daemon/users/{{user}}/status

###
# group: Check Status for Nanny Servers
# @name Get nanny-harvester status
# Retrieves the status of the connectors running in the Integration Daemon
GET {{nannyURL}}/servers/{{nannyHarvester}}/open-metadata/integration-daemon/users/{{user}}/status

###
# group: Check Status for Nanny Servers
# @name Get ecosystem-monitor status
# Retrieves the status of the connectors running in the Integration Daemon
GET {{nannyURL}}/servers/{{ecosystemMonitor}}/open-metadata/integration-daemon/users/{{user}}/status

###
# group: Check Status for Nanny Servers
# @name Restart wolfsonnet Atlas Harvester
# Refreshes all Integration Connectors running in an integration daemon
POST {{nannyURL}}/servers/{{nannyHarvester}}/open-metadata/integration-daemon/users/{{user}}/integration-connectors/restart
Content-Type: application/json

{
    "class" : "NameRequestBody",
    "name" : "AtlasIntegrator"
}

###
# group: Check Status for Nanny Servers
# @name Restart localhost Atlas Harvester
# Refreshes all Integration Connectors running in an integration daemon
POST {{nannyURL}}/servers/{{nannyHarvester}}/open-metadata/integration-daemon/users/{{user}}/integration-connectors/restart
Content-Type: application/json

{
    "class" : "NameRequestBody",
    "name" : "AtlasIntegrator(local)"
}

###
# group: Check Status for Nanny Servers
# @name Refresh Nanny Harvester connectors
# Restarts the requested Integration Service
POST {{nannyURL}}/servers/{{nannyHarvester}}/open-metadata/integration-daemon/users/{{user}}/integration-services/catalog-integrator/refresh

###
# group: Check Status for Nanny Servers
# @name Refresh Ecosystem Monitor connectors
# Restarts the requested Integration Service
POST {{nannyURL}}/servers/{{ecosystemMonitor}}/open-metadata/integration-daemon/users/{{user}}/integration-services/catalog-integrator/refresh

###
# group: Check Status for Nanny Servers
# @name Retrieve ALL the glossary terms for a glossary in nanny-store
POST {{nannyURL}}/servers/{{nannyStore}}/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/{{glossaryGUID}}/terms/retrieve?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
    "class" : "AssetManagerIdentifiersRequestBody",
    "assetManagerGUID" : "ba69fd95-c4d6-451f-9411-b9239cd1b9f8"
}

###
# group: Check Status for Nanny Servers
# @name Retrieve ALL the glossary categories for a glossary in nanny-store
POST {{nannyURL}}/servers/{{nannyStore}}/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/{{glossaryGUID}}/categories/retrieve?
    startFrom=0&
    pageSize=0
Content-Type: application/json

###
# group: Check Status for Nanny Servers
# @name Retrieve a glossary term from nanny-store
POST {{nannyURL}}/servers/{{nannyStore}}/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/terms/{{glossaryTermGUID}}/retrieve
Content-Type: application/json

###
# group: Check Status for Nanny Servers
# @name Retrieve ALL the processes from nanny-store
POST {{nannyURL}}/servers/{{nannyStore}}/open-metadata/access-services/asset-manager/users/{{user}}/processes/by-search-string?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
    "class" : "SearchStringRequestBody",
    "searchString" : ".*"
}

###
# group: Check Status for Nanny Servers
# @name Retrieve ALL the data assets from nanny-store
POST {{nannyURL}}/servers/{{nannyStore}}open-metadata/access-services/asset-manager/users/{{user}}/data-assets/by-search-string?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
    "class" : "SearchStringRequestBody",
    "searchString" : ".*"
}

<> ./Retrieve ALL the data assets from Egeria -Friday.200.json
// {{baseURL}}/servers/metadata-store/open-metadata/access-services/asset-manager/users/{{user}}/data-assets/by-search-string?startFrom=0&pageSize=0

###
# group: Check Status for Nanny Servers
# @name Load open metadata archive file into nanny-store
# Load a file that contains open metadata types and instances.
POST {{nannyURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/{{nannyStore}}/instance/open-metadata-archives/file
Content-Type: text/plain

content-packs/CloudInformationModel.json

###
# group: Work with open metadata ecosystem
# @name Load open metadata archive file into open metadata ecosystem
# Load a file that contains open metadata types and instances.
POST {{baseURL}}/open-metadata/platform-services/users/{{adminUserId}}/server-platform/servers/{{ecosystemServer}}/instance/open-metadata-archives/file
Content-Type: text/plain

content-packs/CocoComboArchive.json

###
# group: Work with open metadata ecosystem
# @name Find all glossaries in open metadata ecosystem
# This call retrieves the details of the Abu Dhabi glossary and checks the adGlossaryGUID is set up properly.
POST {{baseURL}}/servers/{{ecosystemServer}}/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/by-search-string?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
	 "class" : "SearchStringRequestBody",
	 "searchString" : ".*"
}

###
# group: Work with open metadata ecosystem
# @name Retrieve ALL the glossary terms for a glossary in open metadata ecosystem
POST {{baseURL}}/servers/{{ecosystemServer}}/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/{{glossaryGUID}}/terms/retrieve?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
    "class" : "AssetManagerIdentifiersRequestBody",
    "assetManagerGUID" : "ba69fd95-c4d6-451f-9411-b9239cd1b9f8"
}

###
# group: Work with open metadata ecosystem
# @name Retrieve ALL the glossary categories for a glossary in open metadata ecosystem
POST {{baseURL}}/servers/{{ecosystemServer}}/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/{{glossaryGUID}}/categories/retrieve?
    startFrom=0&
    pageSize=0
Content-Type: application/json

###
# group: Work with open metadata ecosystem
# @name Retrieve a glossary term from open metadata ecosystem
POST {{baseURL}}/servers/{{ecosystemServer}}/open-metadata/access-services/asset-manager/users/{{user}}/glossaries/terms/{{glossaryTermGUID}}/retrieve
Content-Type: application/json

###
# group: Work with open metadata ecosystem
# @name Retrieve ALL the processes from open metadata ecosystem
POST {{baseURL}}/servers/{{ecosystemServer}}/open-metadata/access-services/asset-manager/users/{{user}}/processes/by-search-string?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
    "class" : "SearchStringRequestBody",
    "searchString" : ".*"
}

###
# group: Work with open metadata ecosystem
# @name Retrieve ALL the data assets from open metadata ecosystem
POST {{baseURL}}/servers/{{ecosystemServer}}/open-metadata/access-services/asset-manager/users/{{user}}/data-assets/by-search-string?
    startFrom=0&
    pageSize=0
Content-Type: application/json

{
    "class" : "SearchStringRequestBody",
    "searchString" : ".*"
}